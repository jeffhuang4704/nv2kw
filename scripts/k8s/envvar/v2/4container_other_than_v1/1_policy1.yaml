apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: "demo1"
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:   [""]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["pods"]
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments","replicasets","daemonsets","statefulsets"]
    - apiGroups:   ["batch"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["jobs","cronjobs"]
  variables:
  - name: userdata
    expression: '{"good1": "^.*value1$", "good2": "^value2.*$", "good3": "^value3$", "good4": "^value.here$", "good5": "^aaa\\.bbb$"}'
  - name: isType1
    expression: 'object.kind in ["Pod"] ? true: false'
  - name: isType2
    expression: 'object.kind in ["Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"] ? true: false'
  - name: isType3
    expression: 'object.kind in ["CronJob"] ? true: false'
  - name: containerData
    expression: 'variables.isType1 ? object.spec.containers : 
                    variables.isType2 ? object.spec.template.spec.containers : 
                      variables.isType3 ? object.spec.jobTemplate.spec.template.spec.containers : []'
  - name: hasContainer
    expression: 'variables.containerData.size() > 0 ? true : false'
  - name: initContainerData
    expression: 'variables.isType1 ? (has(object.spec.initContainers)? object.spec.initContainers : []) : 
                    variables.isType2 ? (has(object.spec.template.spec.initContainers) ? object.spec.template.spec.initContainers : []) : 
                      variables.isType3 ? (has(object.spec.jobTemplate.spec.template.spec.initContainers) ? object.spec.jobTemplate.spec.template.spec.initContainers: []) : []'
  - name: hasInitContainer
    expression: 'variables.initContainerData.size() > 0 ? true : false'
  - name: ephemeralContainerData
    expression: 'variables.isType1 ? (has(object.spec.ephemeralContainers)? object.spec.ephemeralContainers : []) : 
                    variables.isType2 ? (has(object.spec.template.spec.ephemeralContainers) ? object.spec.template.spec.ephemeralContainers : []) : 
                      variables.isType3 ? (has(object.spec.jobTemplate.spec.template.spec.ephemeralContainers) ? object.spec.jobTemplate.spec.template.spec.ephemeralContainers: []) : []'
  - name: hasEphemeralContainer
    expression: 'variables.ephemeralContainerData.size() > 0 ? true : false'
  validations:
    - expression: "
      !variables.hasContainer ||
      (variables.containerData.exists(container,
        !has(container.env) || 
        (
          has(container.env) && 
          !container.env.exists(envVar, !variables.userdata.exists(check, check==envVar.name &&  envVar.value.matches(variables.userdata[check]) )
        )
        )))
      "
      message: '❌ operator: containers contains_other_than, environment variables must use only allowed key/value pairs.'
    - expression: "
      !variables.hasInitContainer ||
      (variables.initContainerData.exists(container,
        !has(container.env) || 
        (
          has(container.env) && 
          !container.env.exists(envVar, !variables.userdata.exists(check, check==envVar.name &&  envVar.value.matches(variables.userdata[check]) )
        )
        )))
      "
      message: '❌ operator: initContainers contains_other_than, environment variables must use only allowed key/value pairs.'
    - expression: "
      !variables.hasEphemeralContainer ||
      (variables.ephemeralContainerData.exists(container,
        !has(container.env) || 
        (
          has(container.env) && 
          !container.env.exists(envVar, !variables.userdata.exists(check, check==envVar.name &&  envVar.value.matches(variables.userdata[check]) )
        )
        )))
      "
      message: '❌ operator: ephemeralContainers contains_other_than, environment variables must use only allowed key/value pairs.'