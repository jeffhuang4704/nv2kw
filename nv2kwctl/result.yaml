apiVersion: policies.kubewarden.io/v1
kind: ClusterAdmissionPolicyGroup
metadata:
  name: demo
spec:
  expression: policy_labels_containsAny() || policy_annotations_containsAny()
  message: Policy from NeuVector rule ID 1001. Block deployments with bad envVars,
    labels, and annotations.
  policies:
    policy_annotations_containsAny:
      module: registry://ghcr.io/kubewarden/policies/cel-policy:latest
      settings:
        validations:
        - expression: ' !variables.isType1 || ( !variables.dataset1a.exists(key, key
            in variables.blacklist && variables.dataset1a[key].matches(variables.blacklist[key]))
            ) '
          message: '❌ operator: pod contains_any, annotations cannot use any blacklist
            key/value'
        - expression: ' !variables.isType2 || ( (!variables.dataset1a.exists(key,
            key in variables.blacklist && variables.dataset1a[key].matches(variables.blacklist[key])))
            && (!variables.dataset1b.exists(key, key in variables.blacklist && variables.dataset1b[key].matches(variables.blacklist[key])))
            ) '
          message: '❌ operator: deployment contains_any, annotations cannot use any
            blacklist key/value'
        - expression: ' !variables.isType3 || ( (!variables.dataset1a.exists(key,
            key in variables.blacklist && variables.dataset1a[key].matches(variables.blacklist[key])))
            && (!variables.dataset3.exists(key, key in variables.blacklist && variables.dataset3[key].matches(variables.blacklist[key])))
            ) '
          message: '❌ operator: cronjob contains_any, annotations cannot use any blacklist
            key/value'
        variables:
        - expression: '{"bad1": "^value1$", "bad2": "^value2.*$"}'
          name: blacklist
        - expression: 'has(object.metadata.annotations) ? object.metadata.annotations
            : []'
          name: dataset1a
        - expression: 'has(object.spec.template.metadata.annotations) ? object.spec.template.metadata.annotations
            : []'
          name: dataset1b
        - expression: 'has(object.spec.jobTemplate.metadata.annotations) ? object.spec.jobTemplate.metadata.annotations:
            []'
          name: dataset3
        - expression: 'object.kind in ["Pod"] ? true: false'
          name: isType1
        - expression: 'object.kind in ["Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"]
            ? true: false'
          name: isType2
        - expression: 'object.kind in ["CronJob"] ? true: false'
          name: isType3
    policy_labels_containsAny:
      module: registry://ghcr.io/kubewarden/policies/cel-policy:latest
      settings:
        validations:
        - expression: ' !variables.isType1 || ( !variables.dataset1a.exists(key, key
            in variables.blacklist && variables.dataset1a[key].matches(variables.blacklist[key]))
            ) '
          message: '❌ operator: pod contains_any, labels cannot use any blacklist
            key/value'
        - expression: ' !variables.isType2 || ( (!variables.dataset1a.exists(key,
            key in variables.blacklist && variables.dataset1a[key].matches(variables.blacklist[key])))
            && (!variables.dataset1b.exists(key, key in variables.blacklist && variables.dataset1b[key].matches(variables.blacklist[key])))
            ) '
          message: '❌ operator: deployment contains_any, labels cannot use any blacklist
            key/value'
        - expression: ' !variables.isType3 || ( (!variables.dataset1a.exists(key,
            key in variables.blacklist && variables.dataset1a[key].matches(variables.blacklist[key])))
            && (!variables.dataset3.exists(key, key in variables.blacklist && variables.dataset3[key].matches(variables.blacklist[key])))
            ) '
          message: '❌ operator: cronjob contains_any, labels cannot use any blacklist
            key/value'
        variables:
        - expression: '{"bad1": "^value1.*$", "bad2": "^value2$"}'
          name: blacklist
        - expression: 'has(object.metadata.labels) ? object.metadata.labels : []'
          name: dataset1a
        - expression: 'has(object.spec.template.metadata.labels) ? object.spec.template.metadata.labels
            : []'
          name: dataset1b
        - expression: 'has(object.spec.jobTemplate.metadata.labels) ? object.spec.jobTemplate.metadata.labels:
            []'
          name: dataset3
        - expression: 'object.kind in ["Pod"] ? true: false'
          name: isType1
        - expression: 'object.kind in ["Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"]
            ? true: false'
          name: isType2
        - expression: 'object.kind in ["CronJob"] ? true: false'
          name: isType3
  rules:
  - apiGroups:
    - apps
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - deployments
  - apiGroups:
    - batch
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - cronjobs
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - pods

---
